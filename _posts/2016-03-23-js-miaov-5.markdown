---
layout:     post
title:      "javaScript——事件"
date:       2016-03-23
author:     "赵祎鑫"
header-img: "img/post-bg-js-version.jpg"
tags:
    - 笔记
---

#### 焦点事件

焦点：使浏览器能够区分用户输入的对象，当一个元素有焦点的时候，那么它就可以接收用户的输入操作。

 * 1、点击
 * 2、tab
 * 3、javascript
 
不是所有的元素都能够接收焦点，能够响应用户操作的元素才能接收焦点。

```
window.onload = function(){
    var oText = document.getElementById('text1');
    
    //onfocus：当元素获取到焦点时触发
    oText.onfocus = function(){
        if(this.value == '请输入内容'){
            this.value == '';
        }
    }
    
    //onblur：当元素失去焦点的时候触发
    oText.onblur = function(){
        if(this.value == ''){
            this.value == '请输入内容';
        }
    }
    
    //obj.focus()  给指定的元素设置焦点
    oText.focus();
    
    //obj.blur()   取消指定元素的焦点
    oText.blur();
    
    //obj.select()  选取指定元素里边的文本内容
}
```

#### event对象

event：事件对象，当一个事件发生的时候，和当前这个对象发生的这个事件有关的一些详细的信息，都会被临时保存到一个指定的地方——event对象，供我们在需要的时候调用。

事件对象必须在一个事件调用的函数里边使用才有内容。

事件函数：事件调用的函数，一个函数是不是事件函数，不在定义的时候决定，而是取决于这个函数调用的时候。

兼容：

 * IE/chrome：event对象是一个内置的全局对象
 * 标准下：事件对象是通过事件函数的第一个参数传入的
 
如果一个函数是被事件调用的，那么这个函数定义的第一个参数就是事件对象
 
clientX/Y：当一个事件发生的时候，鼠标到页面可视区域的距离

```
window.onload = function(){
    //onmousemove：鼠标移动事件，触发频率不是像素，而是间隔时间，在一个指定时间内（很短），如果鼠标的位置和上一次的位置发生了变化，那么就会触发一次
    var i=0;
    document.onmousemove = function(){
        //document.title = i++;
        var ev = ev || event;
        var scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
        var scrollLeft = document.documentElement.scrollLeft ||document.body.scrollLeft;
        oDiv.style.left = ev.clientX + 
scrollLeft + 'px';
        oDiv.style.top = ev.clientY + scrollTop + 'px';
    }
}
```

#### 事件冒泡

事件冒泡：当一个元素接收到事件以后，会把它接收到的所有事件传播给它的父级，一直到顶层（window）

阻止冒泡：当前要阻止冒泡的事件函数中调用`event.cancelBubble = true;`

#### 事件捕获

```
//给一个对象绑定一个事件处理函数的第一种方式
//obj.onclick = fn;
function fn1(){
    alert(1);
}
function fn2(){
    alert(1);
}
document.onclick = fn1;
document.onclick = fn2;  //会覆盖前面的fn1

//给一个对象的同一个事件绑定多个不同的函数
//给一个对象绑定一个事件处理函数的第二种方式

IE：obj.attachEvent(事件名称,事件函数);
    1、没有捕获
    2、事件名称有on
    3、事件函数执行的顺序：标准IE——正序，非标准IE——倒序
    4、this指向window
标准：obj.addEventListener(事件名称,事件函数,是否捕获);
    1、有捕获
    2、事件名称没有on
    3、事件执行顺序是正序
    4、this指向触发该事件的对象
```

#### call

call：函数下的一个方法，call方法的第一个参数可以改变函数执行过程中的内部this的指向，call第二个参数开始就是原来函数的参数列表

```
function fn1(){
    alert(this);
}

//fn1();   //window
fn1.call();  //调用函数  fn1()==fn1.call()
```

