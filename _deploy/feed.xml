<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>赵祎鑫</title>
    <description>开拓视野，冲破艰险，看见世界，身临其境，贴近彼此，感受生活，这就是生活的目的。</description>
    <link>http://zhaoyixin.xyz/</link>
    <atom:link href="http://zhaoyixin.xyz/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Thu, 24 Nov 2016 15:31:57 +0800</pubDate>
    <lastBuildDate>Thu, 24 Nov 2016 15:31:57 +0800</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>《javascript权威指南》读书笔记</title>
        <description>&lt;h4 id=&quot;section&quot;&gt;词法结构&lt;/h4&gt;

&lt;p&gt;区分大小写，HTML并不区分大小写。&lt;/p&gt;

&lt;p&gt;注释：//单行注释
     /*多行注释
     */&lt;/p&gt;

&lt;p&gt;{x:1,y:2}    //对象
[1,2,3,4,5]  //数组&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;值和变量&lt;/h4&gt;

&lt;p&gt;整型直接量： 0,3,100……&lt;/p&gt;

&lt;p&gt;浮点型直接量：3.1,5,5,6,02e23……&lt;/p&gt;

&lt;p&gt;无穷大值，基于它们的加减乘除运算结果还是无穷大值（当然还保留它们的正负号）&lt;/p&gt;

&lt;p&gt;被0整除在javascript中不报错，它只是简单的返回Infinity或-Infinity。&lt;/p&gt;

&lt;p&gt;0除以0是没有意义的，返回NaN。&lt;/p&gt;

&lt;p&gt;无穷大除以无穷大，给任意负数作开方运算或者算术运算符不是数字或无法转换为数字的操作数一起使用时都将返回NaN。&lt;/p&gt;

&lt;p&gt;下面这些值会被转换成false：undefined,null,0,-0,NaN,空字符串&lt;/p&gt;

&lt;p&gt;typeof null   //object&lt;/p&gt;

&lt;p&gt;undefined是预定义的全局变量，不是关键字，它的值就是“未定义”&lt;/p&gt;

&lt;p&gt;typeof undefined   //undefined&lt;/p&gt;

&lt;p&gt;null == undefined   //true&lt;/p&gt;

&lt;p&gt;null === undefined   //false&lt;/p&gt;

&lt;p&gt;null和undefined都是假值，都不包含任何的属性和方法&lt;/p&gt;

&lt;p&gt;undefined“系统级”，出乎意料的或类似错误的值&lt;/p&gt;

&lt;p&gt;null“程序级”，正常的或在意料之中的值，通常赋值给变量或者属性，或者将它们作为参数传入函数&lt;/p&gt;

&lt;p&gt;当javascript解释器启动时，它将创建一个新的全局对象，并给它一组定义的初始属性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;全局属性，undefined、Infinity、NaN&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;全局函数，isNaN() parseInt() parseFloat() eval()&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;构造函数，Date() RegExp() String() Object() Array()&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;全局对象，Math JSON&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;null == undefined&lt;/p&gt;

&lt;p&gt;‘0’ == 0   //比较之前字符串转换成数字&lt;/p&gt;

&lt;p&gt;0 == false //比较之前布尔值转换成数字&lt;/p&gt;

&lt;p&gt;‘0’ == false  //比较之前字符串和布尔值转换成数字&lt;/p&gt;

&lt;p&gt;所有的对象继承了两个转换方法。一个是toString()，它的作用是返回一个反映这个对象的字符串&lt;/p&gt;

&lt;p&gt;({x;1,y;2}).toString()     //[object object]&lt;/p&gt;

&lt;p&gt;转换对象的函数：toString()  valueOf()&lt;/p&gt;

&lt;p&gt;javascript函数里声明的所有变量（但不涉及赋值）都被“提前”至函数体的顶部&lt;/p&gt;

&lt;p&gt;当声明一个javascript全局变量时，实际上是定义了一个全局对象的一个属性。当使用var声明一个变量时，创建的这个属性是不可配置的，也就是说这个变量是不能通过delete运算符删除。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var a = 1;
delete a   //false
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果没有使用严格模式并给一个未声明的变量赋值的话，javascript会自动创建一个全局变量。以这种方式创建的变量是全局对象的正常的可配置属性，可以删除。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
b = 2;
delete b;   //true
&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-2&quot;&gt;表达式和运算符&lt;/h4&gt;

&lt;p&gt;函数定义表达式：var square = function(x){return x*x;}     //返回传入参数值的平方&lt;/p&gt;

&lt;p&gt;```
var i=1; j=++i    //i和j的值都是2，对操作符进行增量计算，并返回计算后的值&lt;/p&gt;

&lt;p&gt;var i=1; j=i++    //i是2，j是1，对操作符进行增量计算，并返回未做增量计算的值
```&lt;/p&gt;

&lt;p&gt;in运算符希望它的左操作数是字符串或可以转换为字符串，希望它的右侧操作数是一个对象。如果右侧的对象拥有一个名为左操作数值的属性名，则表达式返回true&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var point = {x:1,y:2};
&#39;x&#39; in point;    //true
&#39;z&#39; in point;    //false
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;instanceof操作符希望左操作数是一个对象，右操作数标识对象的类。如果左侧的对象是右侧类的实例，则表达式返回true，否则返回false。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var d = new Date();
d instanceof Date;   //true
d instanceof Object;  //true
d instanceof Number;  //false
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果instanceof的左操作数不是对象，instanceof会返回false，如果右操作数不是函数，则抛出一个类型错误异常。&lt;/p&gt;

&lt;p&gt;typeof是一元运算符，放在单个操作数的前面，操作数可以是任意类型。返回值为表示操作数类型的一个字符串。&lt;/p&gt;

&lt;p&gt;delete是一元操作符，它用来删除对象属性或者数组元素。&lt;/p&gt;

&lt;h4 id=&quot;section-3&quot;&gt;语句&lt;/h4&gt;

</description>
        <pubDate>Thu, 24 Nov 2016 00:00:00 +0800</pubDate>
        <link>http://zhaoyixin.xyz/2016/11/24/javascriptQWZN/</link>
        <guid isPermaLink="true">http://zhaoyixin.xyz/2016/11/24/javascriptQWZN/</guid>
        
        <category>笔记</category>
        
        
      </item>
    
      <item>
        <title>图解HTTP读书笔记</title>
        <description>&lt;h4 id=&quot;web&quot;&gt;了解web及网络基础&lt;/h4&gt;

&lt;p&gt;web是建立在HTTP协议上通信的&lt;/p&gt;

&lt;p&gt;现在已经提出了三项web构建技术：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;SGML(Standard Generalized Markup Language,标准通用标记语言)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;HTML(HyperText Markup Language,超文本标记语言)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;URL(Uniform Resource Locator,统一资源定位符)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;TCP/IP是互联网相关的各类协议族的总称&lt;/p&gt;

&lt;p&gt;TCP/IP协议族按层次分别分为：应用层、传输层、网络层和数据链路层&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;应用层：决定了向用户提供应用服务时通信的活动(ftp、DNS、HTTP)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;传输层：对上层应用层提供处于网络连接中的两台计算机之间的数据传输(TCP、UDP)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;网络层：用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;链路层：用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱动、NIC（网络适配器，即网卡）以及光纤等物理可见部分。硬件上的范畴均在链路层的作用范围之内。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Fri, 21 Oct 2016 00:00:00 +0800</pubDate>
        <link>http://zhaoyixin.xyz/2016/10/21/tujieHTTP/</link>
        <guid isPermaLink="true">http://zhaoyixin.xyz/2016/10/21/tujieHTTP/</guid>
        
        <category>笔记</category>
        
        
      </item>
    
      <item>
        <title>javascript设计模式与开发实践读书笔记</title>
        <description>&lt;h4 id=&quot;this&quot;&gt;this&lt;/h4&gt;

&lt;h5 id=&quot;this-1&quot;&gt;this的指向&lt;/h5&gt;

&lt;p&gt;出去不常用的with和eval的情况，具体到实际应用中，this的指向大致可以分为以下4种。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;作为对象的方法调用&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;作为普通函数调用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;构造器调用。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Function.prototype.call或Function.prototype.apply调用。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1、作为对象的方法调用&lt;/p&gt;

&lt;p&gt;当函数作为对象的方法被调用时，this指向该对象：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var obj = {
    a:1,
    getA:function(){
        alert(this===obj);        //输出true
        alert(this.a);            //输出1
    }
};
obj.getA();
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2、作为普通函数调用&lt;/p&gt;

&lt;p&gt;当函数不作为对象的属性被调用时，也就是我们常说的普通函数方式，此时的this总是指向全局对象。在浏览器的javascript里，这个全局对象就是window对象。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
window.name = &#39;globalName&#39;;
var getName = function(){
    return this.name;
};
console.log(getName());         //输出globalName
或者：
window.name = &#39;globalName&#39;;
var myObject = {
    name:&#39;sven&#39;,
    getName:function(){
        return this.name;
    }
};
var getName = myObject.getName;
console.log(getName());          //globalName
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;有时候我们会遇到一些困扰， 比如在 div 节点的事件函数内部， 有一个局部的 callback 方法，callback 被作为普通函数调用时， callback 内部的 this 指向了 window ，但我们往往是想让它指向该 div 节点，见如下代码：&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;
&lt;html&gt;
    &lt;body&gt;
        &lt;div id=&quot;div1&quot;&gt;我是一个 div&lt;/div&gt;
    &lt;/body&gt;
    &lt;script&gt;
        window.id = &#39;window&#39;;
        document.getElementById( &#39;div1&#39; ).onclick = function(){
            alert ( this.id ); // 输出：&#39;div1&#39;
            var callback = function(){
                alert ( this.id ); // 输出：&#39;window&#39;
            }
            callback();
        };
    &lt;/script&gt;
&lt;/html&gt;
&lt;p&gt;```&lt;/p&gt;

&lt;p&gt;此时有一种简单的解决方案，可以用一个变量保存 div 节点的引用：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
document.getElementById( &#39;div1&#39; ).onclick = function(){
    var that = this; // 保存 div 的引用
    var callback = function(){
        alert ( that.id ); // 输出：&#39;div1&#39;
    }
    callback();
};
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3、构造器调用&lt;/p&gt;

&lt;p&gt;javascript中没有类，但是可以从构造器中创建对象，同时也提供了new运算符，使得构造器看起来更像一个类。&lt;/p&gt;

&lt;p&gt;除了宿主提供的一些内置函数，大部分javascript函数都可以当作构造器使用。构造器的外表跟普通函数一模一样，它们的区别在于被调用的方式。当用new运算符调用函数时，该函数总会返回一个对象，通常情况下，构造器里this就指向返回的这个对象，见如下代码：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var MyClass = function(){
    this.name = &#39;sven&#39;;
};
var obj = new MyClass();
alert ( obj.name ); // 输出：sven
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;但用 new 调用构造器时，还要注意一个问题，如果构造器显式地返回了一个 object 类型的对象，那么此次运算结果最终会返回这个对象，而不是我们之前期待的 this ：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var MyClass = function(){
    this.name = &#39;sven&#39;;
    return{    //显式地返回一个对象
        name:&#39;anne&#39;
    }
};
var obj = new MyClass();
alert(obj.name);     //输出anne
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;如果构造器不显式地返回任何数据，或者是返回一个非对象类型的数据，就不会造成上述问题：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var MyClass = function(){
    this.name = &#39;sven&#39;;
    return &#39;anne&#39;;     //返回string类型
};
var obj = new MyClass();
alert(oj.name);     //sven
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4、Function.prototype.call或Function.prototype.apply调用&lt;/p&gt;

&lt;p&gt;跟普通的函数调用相比， 用 Function.prototype.call 或 Function.prototype.apply可以动态地改变传入函数的 this ：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var obj1 = {
    name:&#39;sven&#39;,
    getName:function(){
        return this.name;
    }
};
var obj2 = {
    name:&#39;anne&#39;
};
console.log(obj1.getName());   //sven
console.log(obj1.getName.call(obj2));  //anne
&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;this-2&quot;&gt;丢失的this&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var obj = {
    myName : &#39;sven&#39;,
    getName : function(){
        return this.myName;
    }
};
console.log(obj.getName());    //sven
var getName2 = obj.getName;
console.log(getName2());       //undefined
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当用另外一个变量 getName2 来引用 obj.getName ，并且调用 getName2 时，根据 2.1.2节提到的规律，此时是普通函数调用方式， this 是指向全局 window 的，所以程序的执行结果是 undefined 。&lt;/p&gt;

&lt;h4 id=&quot;callapply&quot;&gt;call和apply&lt;/h4&gt;

&lt;p&gt;ECAMScript 3给 Function 的原型定义了两个方法， 它们是 Function.prototype.call 和 Function.prototype.apply 。&lt;/p&gt;

&lt;p&gt;apply 接受两个参数，第一个参数指定了函数体内 this 对象的指向，第二个参数为一个带下标的集合，这个集合可以为数组，也可以为类数组， apply 方法把这个集合中的元素作为参数传递给被调用的函数：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var func = function(a,b,c){
    alert([a,b,c]);    //[1,2,3]
};
func.apply(null,[1,2,3]);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;call 传入的参数数量不固定， 跟 apply 相同的是， 第一个参数也是代表函数体内的 this 指向，从第二个参数开始往后，每个参数被依次传入函数：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var func = function(a,b,c){
    alert([a,b,c]);    //[1,2,3]
};
func.call(null,1,2,3);
&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;callapply-1&quot;&gt;call和apply的用途&lt;/h5&gt;

&lt;p&gt;1、改变this指向&lt;/p&gt;

&lt;p&gt;call和apply最常见的用途是改变函数内部的this指向：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var obj1 = {
    name:&#39;sven&#39;
};
var obj2 = {
    name:&#39;anne&#39;
};
window.name = &#39;window&#39;;
var getName = function(){
    alert(this.name);
};
getName();    //window
getName.call(obj1);  //sven
getName.call(obj2);  //anne
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2、Function.prototype.bind&lt;/p&gt;

&lt;p&gt;大部分高级浏览器都实现了内置的Function.prototype.bind，用来指定函数内部的this指向，即使没有原生的Function.prototype.bind实现，我们来模拟一个也不是难事：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
Function.prototype.bind = function(context){
    var self = this;     //保存原函数
    return function(){   //返回一个新的函数
        return self.apply(context,arguments);  //执行新的函数的时候，会把之前传入的context当作新函数体内的this
    }
};
var obj = {
    name : &#39;sven&#39;
};
var func = function(){
    alert(this.name);   //sven
}.bind(obj);
func();
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3、借用其他对象的方法&lt;/p&gt;

&lt;p&gt;借用方法的第一种场景是“借用构造函数”，通过这种技术，可以实现一些类似继承的效果：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var A = function(name){
    this.name = name;
};
var B = function(){
    A.apply(this,arguments);
};
B.prototype.getName = function(){
    return this.name;
};
var b = new B(&#39;sven&#39;);
console.log(b.getName());   //sven
&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;闭包&lt;/h4&gt;

&lt;h5 id=&quot;section-1&quot;&gt;变量的作用域&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var func = function(){
    var a = 1;
    alert(a);   //1
};
func();
alert(a);    //Uncaught ReferenceError: a is not defined
&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-2&quot;&gt;变量的生存周期&lt;/h5&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var func = function(){
    var a = 1;     //退出函数后局部变量a将被销毁
    alert(a);
};
func();
现在我们来看看下面这段代码：
var func = function(){
    var a = 1;
    return function(){
        a++;
        alert(a);
    }
};
var f = func():
f();    //2
f();    //3
f();    //4
f();    //5
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;当退出函数后，局部变量 a 并没有消失，而是似乎一直在某个地方存活着。这是因为当执行 var f = func(); 时， f 返回了一个匿名函数的引用，它可以访问到 func()被调用时产生的环境，而局部变量 a 一直处在这个环境里。既然局部变量所在的环境还能被外界访问，这个局部变量就有了不被销毁的理由。在这里产生了一个闭包结构，局部变量的生命看起来被延续了。&lt;/p&gt;

&lt;p&gt;解决方法是在闭包的帮助下，把每次循环的 i 值都封闭起来。当在事件函数中顺着作用域链中从内到外查找变量 i 时，会先找到被封闭在闭包环境中的 i ，如果有 5个 div ，这里的 i 就分别是 0,1,2,3,4：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
for(var i=0;i&amp;lt;nodes.length;i++){
    (function(i){
        nodes[i].onclick = function(){
            console.log(i);
        }
    })(i)
};
&lt;/code&gt;&lt;/p&gt;

&lt;h5 id=&quot;section-3&quot;&gt;闭包的更多作用&lt;/h5&gt;

&lt;p&gt;1、封装变量&lt;/p&gt;

&lt;p&gt;闭包可以帮助把一些不需要暴露在全局的变量封装成“私有变量”。假设有一个计算乘积的简单函数：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var mult = function(){
    var a = 1;
    for(var i=0;l&amp;lt;arguments.length;i&amp;lt;l;i++){
        a = a*arguments[i];
    }
    return a;
};
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2、延续局部变量的寿命&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var report = (function(){
    var imgs = [];
    return function(src){
        var img = new Image();
        img.push(img);
        img.src = src;
    }
})();
&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Thu, 29 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://zhaoyixin.xyz/2016/09/29/jsSjmsKfsjDsbj/</link>
        <guid isPermaLink="true">http://zhaoyixin.xyz/2016/09/29/jsSjmsKfsjDsbj/</guid>
        
        <category>笔记</category>
        
        
      </item>
    
      <item>
        <title>妙味课堂——javaScript模块化</title>
        <description>
</description>
        <pubDate>Tue, 20 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://zhaoyixin.xyz/2016/09/20/miaov-jsmkh/</link>
        <guid isPermaLink="true">http://zhaoyixin.xyz/2016/09/20/miaov-jsmkh/</guid>
        
        <category>笔记</category>
        
        
      </item>
    
      <item>
        <title>妙味课堂——javaScript继承的其他形式</title>
        <description>&lt;p&gt;继承的其他形式&lt;/p&gt;

&lt;p&gt;类式继承&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;利用构造函数（类）继承的方式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;类：javascript是没有类的概念的，但是可以把构造函数看作是类&lt;/p&gt;

&lt;p&gt;要做属性和方法继承的时候，要分开继承&lt;/p&gt;

&lt;p&gt;```
function Aaa(){            //父类
    this.name = [1,2,3];
}
Aaa.prototype.showName = function(){
    alert(this.name);
};
function Bbb(){             //子类
    Aaa.call(this);
}&lt;/p&gt;

&lt;p&gt;var F = function(){};
F.prototype = Aaa.prototype;
Bbb.prototype = new F();      //类式继承
Bbb.prototype.constructor = Bbb;    //修正指向问题&lt;/p&gt;

&lt;p&gt;var b1 = new Bbb();
b1.showName();
```&lt;/p&gt;

&lt;p&gt;原型继承&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;借助原型来实现对象继承对象&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var a = {
    name : &#39;zyx&#39;
};
var b = cloneObj(a);
alert(b.name);           //zyx
function cloneObj(obj){
    var F = function(){};
    F.prototype = obj;
    return new F();
}
&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 20 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://zhaoyixin.xyz/2016/09/20/miaov-msdx3/</link>
        <guid isPermaLink="true">http://zhaoyixin.xyz/2016/09/20/miaov-msdx3/</guid>
        
        <category>笔记</category>
        
        
      </item>
    
      <item>
        <title>妙味课堂——javaScript高级面向对象</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
function Aaa(){
    this.name = name;
}
Aaa.prototype.showName = function(){
    alert(this.name);
}
var s1 = new Aaa();
s1.showName();
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;尽量不要去修改或者添加系统对象下面的方法和属性&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var arr = [1,2,3];
arr.push(4,5,6);
alert(arr);      //1,2,3,4,5,6
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;在JS源码中，系统对象也是基于原型的程序&lt;/p&gt;

&lt;p&gt;高级面向对象&lt;/p&gt;

&lt;p&gt;包装对象：基本类型都有自己对应的包装对象 ： String    Number    Boolean&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;javascript本身就是基于原型的程序&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;String   Number   Boolean&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var str = &#39;hello&#39;;
str.charAt(0);      //基本类型会找到对应的包装对象类型，然后包装对象把所有的属性和方法给了基本类型，然后包装对象消失。
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;原型链&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;实例对象与原型之间的连接，叫做原型链&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;proto&lt;/em&gt; (隐式连接)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Object对象类型是原型链的最外层&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
function Aaa(){
    this.name = name;
}
&amp;lt;!--Aaa.prototype.num = 10;--&amp;gt;
Object.prototype.num = 30;
var s1 = new Aaa();
s1.num;            //30
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;面向对象的一些属性和方法&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;hasOwnProperty()：看是不是对象自身下面的属性&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;constructor：查看对象的构造函数
&amp;gt; 每个原型都会自动添加constructor属性
&amp;gt; For in 的时候有些属性是找不到的
&amp;gt; 避免修改constructor属性&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;instanceof：运算符
&amp;gt; 对象与构造函数在原型链上是否有关系&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;toString():object上的方法&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var arr = [];
arr.mun = 10;
Array.prototype.num2 = 20;
alert(arr.hasOwnProperty(&#39;num&#39;));    //true
alert(arr.hasOwnProperty(&#39;num2&#39;));    //false
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;```
function Aaa(){&lt;/p&gt;

&lt;p&gt;}
Aaa.prototype.constructor = Aaa;       //程序会自动添加这句话
var a1 = new Aaa();
alert(a1.constructor);    //Aaa
```&lt;/p&gt;

&lt;p&gt;```
fucntion Aaa(){&lt;/p&gt;

&lt;p&gt;}
var a1 = new Aaa();
alert(a1 instanceof Aaa);     //true
alert(a1 instanceof Array);     //false
```&lt;/p&gt;

&lt;p&gt;toSteing：系统对象下面都是自带的，自己写的对象都是通过原型链找Object下面的&lt;/p&gt;

&lt;p&gt;```
var arr = [];
alert(arr.toString == Object.prototype.toString);   //false
function Aaa(){&lt;/p&gt;

&lt;p&gt;}
var a1 = new Aaa();
alert(a1.toString == Object.prototype.toString);    //true
```&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var arr = [1,2,3];
alert(typeof arr.toString());    //&#39;1,2,3&#39;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;利用toString做类型的判断&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var arr = [];
alert(Object.prototype.toString.call(arr));    //&#39;[Object Array]&#39;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;对象的继承&lt;/p&gt;

&lt;p&gt;什么是继承&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在原有对象的基础上，略作修改，得到一个新的对象&lt;/li&gt;
  &lt;li&gt;不影响原有对象的功能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如何添加继承&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;属性：call 调用父类的构造函数&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;方法：for in 拷贝继承&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
function CreatePerson(name,sex){        //父类
    this.name = name;
    this.sex = sex;
}
CreatePerson.prototype.showName = function(){
    alert(this.name);
}
var p1 = new CreatePerson(&#39;zyx&#39;,&#39;男&#39;);
p1.showName();
function CreateStar(name,sex,job){           //子类
    CreatePerson.call(this,name,sex);
    this.job = job;
}
CreateStar.prototype = CreatePerson.prototype;
var p2 = new CreateStar(&#39;周杰伦&#39;,&#39;男&#39;,&#39;演员&#39;);
p2.showName();
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;对象的复制操作&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var a = {
    name : &#39;小明&#39;
};
var b = a;
b.name = &#39;小强&#39;;
alert(a.name);      //小强
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var a = {
    name : &#39;小明&#39;
};
var b = {};
for(var attr in a){
    b[attr] = a[attr];
}
b.name = &#39;小强&#39;;
alert(a.name);      //小明
&lt;/code&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 20 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://zhaoyixin.xyz/2016/09/20/miaov-msdx2/</link>
        <guid isPermaLink="true">http://zhaoyixin.xyz/2016/09/20/miaov-msdx2/</guid>
        
        <category>笔记</category>
        
        
      </item>
    
      <item>
        <title>妙味课堂——javaScript面向对象</title>
        <description>&lt;p&gt;什么是面向对象编程&lt;/p&gt;

&lt;p&gt;用对象的思想去写代码，就是面向对象编程&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;过程式写法&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;面向对象写法&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们一直都在使用对象&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;数组 Array 时间 Date&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;面向对象编程（OOP）的特点&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;抽象：抓住核心问题&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;封装：只能通过对象来访问方法&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;继承：从已有对象上继承出新的对象&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;多态：多对象的不同形态&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```
var arr = new Array();    //我们把系统自带的对象，叫做系统对象&lt;/p&gt;

&lt;p&gt;var date = new Date();&lt;/p&gt;

&lt;p&gt;arr.length;&lt;/p&gt;

&lt;p&gt;arr.push;&lt;/p&gt;

&lt;p&gt;arr.sort();&lt;/p&gt;

&lt;p&gt;date.getDate();&lt;/p&gt;

&lt;p&gt;var t1 = new Tab();&lt;/p&gt;

&lt;p&gt;t1.over();&lt;/p&gt;

&lt;p&gt;t1.autoPlay();
```&lt;/p&gt;

&lt;p&gt;对象的组成&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;方法（行为、操作）——函数：过程、动态的&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;属性——变量：状态、静态的&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;创建第一个面向对象程序&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;为对象添加属性和方法&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Object&lt;/li&gt;
  &lt;li&gt;this指向&lt;/li&gt;
  &lt;li&gt;创建两个对戏那个：重复代码过多&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```
var arr = [];&lt;/p&gt;

&lt;p&gt;arr.number = 10;    //对象下面的变量，叫做对象的属性&lt;/p&gt;

&lt;p&gt;arr.length;&lt;/p&gt;

&lt;p&gt;arr.text = function(){    //对象下面的函数，叫做对象的方法
    alert(123);
}
```&lt;/p&gt;

&lt;p&gt;```
var obj = new Object();     //这是创建了一个空的对象&lt;/p&gt;

&lt;p&gt;obj.name = ‘zyx’;           //属性&lt;/p&gt;

&lt;p&gt;obj.showName = function(){  //方法
    alert(obj.name);
};
```&lt;/p&gt;

&lt;p&gt;工厂模式&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;面向对象中的封装函数&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;改成与系统对象类似写法&lt;/li&gt;
  &lt;li&gt;首字母大写&lt;/li&gt;
  &lt;li&gt;new关键字提取&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;this指向为新对象的对象&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;构造函数&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;用来创建对象的函数，叫做构造函数&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;存在的问题&lt;/li&gt;
  &lt;li&gt;对象的引用
-浪费内存&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;```
function createPerson(){
    var obj = new Object();
    obj.name = name;
    obj.showName = function(){
        alert(obj.name);
    };
    return obj;
}
var p1 = createPerson(‘zyx’);
p1.showName();&lt;/p&gt;

&lt;p&gt;var p2 = createPerson(‘zyx2’);
p2.showName();
```&lt;/p&gt;

&lt;p&gt;当new去调用一个函数，这个时候函数中的this就是创建出来的对象，而且函数的返回值直接就是this了（隐式返回）&lt;/p&gt;

&lt;p&gt;new后面调用的函数，叫做构造函数&lt;/p&gt;

&lt;p&gt;```
function CreatePerson(){
    this.name = name;
    this.showName = function(){
        alert(this.name);
    };
}
var p1 = new CreatePerson(‘zyx’);
p1.showName();&lt;/p&gt;

&lt;p&gt;var p2 = new CreatePerson(‘zyx2’);
p2.showName();&lt;/p&gt;

&lt;p&gt;alert(p1.showName == p2.showName);     //false
```&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var a = [1,2,3];
var b = [1,2,3];
alert(a == b);     //false    对象类型：值和引用都相同才行
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var a = 5;
var b = a;
b += 3;
alert(b);    //8
alert(a);    //5     基本类型；赋值时只是值的复制
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var a = [1,2,3];
var b = a;
b.push(4);
alert(b);    //1,2,3,4
alert(a);    //1,2,3,4    对象类型：赋值不仅是指的复制，而且也是引用的传递
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var a = [1,2,3];
var b = a;
b = [1,2,3,4];
alert(b);      //1,2,3,4
alert(a);      //1,2,3
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var a = 5;
var b = 5;
alert(a == b);   //true   基本类型：值相同就可以
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var a = [1,2,3];
var b = a;
alert(a==b);     //true
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;原型：去改写对象下面公用的方法或者属性，让公用的方法或属性在内存中只存在一份，提高性能。&lt;/p&gt;

&lt;p&gt;原型：CSS中的class&lt;/p&gt;

&lt;p&gt;普通方法：CSS中的style&lt;/p&gt;

&lt;p&gt;原型：prototype：要写在构造函数的下面&lt;/p&gt;

&lt;p&gt;概念&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;重写对象方法，让相同方法在内存中只存在一份（提高性能）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;学习原型&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;类比：CSS中的class&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过原型改写工厂模式&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;原则：1、相同的属性和方法可以加载原型上
     2、混合的编程模式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;总结面向对象写法&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;构造函数加属性，原型加方法&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var arr = [1,2,3,4,5];
arr.sum = function(){
    var result = 0;
    for(var i=0;i&amp;lt;arr.length;i++){
        result += this[i];
    }
    return result;
};
alert(arr.sum());    //15
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var arr = [1,2,3,4,5];
Array.prototype.sum = function(){
    var result = 0;
    for(var i=0;i&amp;lt;this.length;i++){
        result += this[i];
    }
    return result;
};
alert(arr.sum());
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
function CreatePerson(name){
    this.name = name;
}
CreatePerson.prototype.showName = function(){
    alert(this.name);
}
var p1 = new CreatePerson(&#39;zyx&#39;);
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;面向对象的写法&lt;/p&gt;

&lt;p&gt;```
function 构造函数(){
    this.属性
}
构造函数.原型.方法 = function(){&lt;/p&gt;

&lt;p&gt;}
var 对象1 = new 构造函数();
对象1.方法();
```&lt;/p&gt;

</description>
        <pubDate>Sun, 18 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://zhaoyixin.xyz/2016/09/18/miaov-msdx1/</link>
        <guid isPermaLink="true">http://zhaoyixin.xyz/2016/09/18/miaov-msdx1/</guid>
        
        <category>笔记</category>
        
        
      </item>
    
      <item>
        <title>妙味课堂——跨域</title>
        <description>&lt;p&gt;javascript中的跨域&lt;/p&gt;

&lt;p&gt;1、document.domain = ‘a.com’;&lt;/p&gt;

&lt;p&gt;2、服务器代理：XMLHttpRequest代理文件&lt;/p&gt;

&lt;p&gt;3、script标签：jsonp&lt;/p&gt;

&lt;p&gt;jsonp ： json +　padding(内填充)&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
function box(json){
    alert(json.name);    //miaov
}
box;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;4、location.hash&lt;/p&gt;

</description>
        <pubDate>Tue, 13 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://zhaoyixin.xyz/2016/09/13/miaov-ky/</link>
        <guid isPermaLink="true">http://zhaoyixin.xyz/2016/09/13/miaov-ky/</guid>
        
        <category>笔记</category>
        
        
      </item>
    
      <item>
        <title>妙味课堂——闭包</title>
        <description>&lt;p&gt;1、什么是闭包？&lt;/p&gt;

&lt;p&gt;函数嵌套函数&lt;/p&gt;

&lt;p&gt;内部函数可以引用外部函数的参数和变量&lt;/p&gt;

&lt;p&gt;参数和变量并不会被垃圾回收机制所收回&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
function aaa(a){
    var b = 5;    //并不会被回收
    function bbb(){
        alert(b);
        alert(a);
    }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;javascript中的垃圾回收机制&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
function aaa(){
    var a = 1;     //执行完变量就会被收回
}
aaa();
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
function aaa(){
    var a = 5;
    function bbb(){
        alert(a);
    }
    return bbb;
}
var c = aaa();
c();
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;2、闭包有什么好处？应用在哪里？&lt;/p&gt;

&lt;p&gt;希望一个变量长期驻扎在内存当中&lt;/p&gt;

&lt;p&gt;避免全局变量的污染&lt;/p&gt;

&lt;p&gt;模块化代码&lt;/p&gt;

&lt;p&gt;私有成员的存在&lt;/p&gt;

&lt;p&gt;在循环中直接找到对应元素的索引&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var a = 1;
function aaa(){
    a++;
    alert(a);
}
aaa();   //2
aaa();   //3
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
function aaa(){
    var a = 1;
    a++;
    alert(a);
}
aaa();   //2
aaa();   //2
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
function aaa(){
    var a = 1;
    return function(){
        a++;
        alert(a);
    }
}
var b = aaa();
b();   //2
b();   //3
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var aaa = (function(){
    var a = 1;
    return function(){
        a++;
        alert(a);
    }
})();
aaa();    //2
aaa();    //3
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var aaa = (function(){
    var a = 1;
    funtcion bbb(){
        a++;
        alert(a);
    }
    function ccc(){
        a++;
        alert(a);
    }
    return {
        b:bbb,
        c:ccc
    }
})();
aaa.b();    //2
aaa.c();    //3
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
var aLi = document.getElementsByTagName(&#39;li&#39;);
for(var i=0;i&amp;lt;aLi.length;i++){
    (function(i){
        aLi[i].onclick = function(){
            alert(i);
        }
    })(i);
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;3、闭包需要注意的地方？&lt;/p&gt;

&lt;p&gt;在IE下容易引发内存泄漏&lt;/p&gt;

</description>
        <pubDate>Tue, 13 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://zhaoyixin.xyz/2016/09/13/miaov-bb/</link>
        <guid isPermaLink="true">http://zhaoyixin.xyz/2016/09/13/miaov-bb/</guid>
        
        <category>笔记</category>
        
        
      </item>
    
      <item>
        <title>妙味课堂——函数声明与函数表达式</title>
        <description>&lt;p&gt;函数声明：funtcion 函数名(){}&lt;/p&gt;

&lt;p&gt;函数表达式：function 函数名（可写可不写）(){} : 命名函数表达式,匿名函数表达式&lt;/p&gt;

&lt;p&gt;```
function aaa(){}   //函数声明&lt;/p&gt;

&lt;p&gt;var a = function aaa(){}      //命名函数表达式&lt;/p&gt;

&lt;p&gt;var a = function(){}          //匿名函数表达式&lt;/p&gt;

&lt;p&gt;(function aaa(){})            //函数表达式
```&lt;/p&gt;

&lt;p&gt;区别：&lt;/p&gt;

&lt;p&gt;1、函数表达式可以直接后面加括号执行，而函数声明是不可以的。&lt;/p&gt;

&lt;p&gt;2、函数声明可以被提前解析出来。&lt;/p&gt;

</description>
        <pubDate>Mon, 12 Sep 2016 00:00:00 +0800</pubDate>
        <link>http://zhaoyixin.xyz/2016/09/12/miaov-smybds/</link>
        <guid isPermaLink="true">http://zhaoyixin.xyz/2016/09/12/miaov-smybds/</guid>
        
        <category>笔记</category>
        
        
      </item>
    
  </channel>
</rss>
